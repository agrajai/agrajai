public class Trees 
{
	Node root;
	
	public class Node
	{
		Node left;
		Node right;
		int data;
		
		public Node (int d)
		{
			this.data = d;
			this.left = null;
			this.right = null;
		}
	}
	
	public static void main(String[] s)
	{
		Trees t = new Trees();
		t.createBST(7);
		t.createBST(5);
		t.createBST(1);
		t.createBST(6);
		t.createBST(9);
		
		
		System.out.println("Printing PRE ORDER TRAVERSAL");
		t.preOrderTraversal(t.root);
		
		System.out.println("Printing IN ORDER TRAVERSAL");
		t.inOrderTraversal(t.root);
		
		System.out.println("Printing POST ORDER TRAVERSAL");
		t.postOrderTraversal(t.root);
		
		System.out.println("iS BST: " + t.isBinarySearchTree(t.root, Integer.MIN_VALUE, Integer.MAX_VALUE));
		
	}
	
	public Node insert(Node root, int d)
	{
		if (root == null)
		{
			root = new Node(d);
		}
		else if (root.data > d)
		{
			root.left = insert(root.left, d);
		}
		else
		{
			root.right = insert(root.right, d);
		}
		
		return root;
	}
	
	public void createBST(int d)
	{
		root = insert(root, d);
	}

	//pre order traversal - ROOT > LEFT > RIGHT
	public void preOrderTraversal(Node root)
	{
		if (root == null)
			return;
		
		System.out.println(root.data);
		preOrderTraversal(root.left);
		preOrderTraversal(root.right);
	}
	
	//In order Traversal LEFT > ROOT > ROOT
	public void inOrderTraversal(Node root)
	{
		if (root == null)
		{
			return;
		}
		
		inOrderTraversal(root.left);
		System.out.println(root.data);
		inOrderTraversal(root.right);
	}
	
	//Post Order Traversal LEFT > RIGHT > ROOT
	public void postOrderTraversal(Node root)
	{
		if (root == null)
			return;
		
		postOrderTraversal(root.right);
		postOrderTraversal(root.left);
		System.out.println(root.data);
	}
	
	
	//Find max of left Sub tree and find min of right sub tree and compare with root
	//if max of left sub tree is less than root and if min of right sub tree is greater than root 
	//it is a BST
	public boolean isBinarySearchTree(Node root, int min, int max)
	{
		if (root == null)
		{
			return true;
		}
		
		return (root.data > min) && 
				(root.data < max) && 
				isBinarySearchTree(root.left, min, root.data) && 
				isBinarySearchTree(root.right, root.data, max);
	}
	
	// Given a sorted (increasing order) array, write an algorithm to create a binary tree with minimal height
	public Node createBSTWithMinimalHeight(int[] arr, int start, int end)
	{
		if (start <= end)
		{
			int mid = (start + end) / 2;
			root = new Node(arr[mid]);
			
			if (start < end)
			{
				root.left = createBSTWithMinimalHeight(arr, start, mid);
				root.right = createBSTWithMinimalHeight(arr, mid + 1, end);
			}
		}
		
		return root;
	}
}
